we will try and understand micro services architecture using a simple web application.
We will then try and deploy this web application on multiple different Kubernetes platforms such as Google
So let's get started.
I'm going to use the same sample application that everyone uses to demonstrate docker.
It's a simple yet comprehensive application developed by Docker to demonstrate the various features
available in running an application stack on docker.
So let's first get familiarized with the application, because we will be working with the same application
in different sections through the rest of this course.
This is a sample voting application which provides an interface for a user to vote and another interface
to show the results.
The application consists of various components such as the voting app which is a web application developed
in Python to provide the user with an interface to choose between two options a cat and a dog.
When you make a selection the vote is stored in redis.
For those of you who are new to redis. Redis in this case  serves as a database in memory.
This vote is then processed by the worker which is an application written in .NET the worker application
takes the new vote and updates the persistence database, which is at postgreSQL
in our case. The postgreSQL will simply has a table with the number of votes for each category.
Cats and dogs in this case it increments the number of votes for cats as our vote was for cats.
Finally the result of the vote is displayed in a web interface which is another web application developed
in Nodejs.
This resulting application reads the count of votes from the postgreSQL database and display
it to the user.
So that is the architecture and data flow of this simple voting application stack.
As you can see this sample application is built with a combination of different services, different development
tools and multiple different development platforms such as python,
Nodejs, .NET, etc..
This sample application will be used to showcase how easy it is to set up an entire application stack
consisting of diverse components in docker. Let us see how we can put together this application stack
on a single docker engine using Docker run commands.
Let's just assume that all images of applications are already built and are available on Docker repository.
Let us start with the data layer. First,
we are on the docker run command to start an instance of redis by running the docker run.
redis command.
We will add the -d parameter to run this container in the background and we will also name
the container redis.
Now naming the containers is important.
Why is that important.
Hold that thought you will come to that in a bit. Next we will deploy the PostgreSQL database
by running the docker run postgres command this time too.
We will add the -d auction to run this in the background.
I named this container "db" for database.
Next we will start with the application services.
We will deploy a front end app for voting interface by running an instance of voting app image. Run
the docker run command and name the instance vote.
Next we will deploy the results web application that shows the results
the host.
This way we can access the web UI of the resulting app on a browser.
Finally we deploy the worker by running an instance the worker image. OK.
Now this is all good.
And we can see that all the instances are running on the host but there is some problem. It just does
not seem to work.
The problem is that we have successfully run all the different containers but we haven't actually linked
them together as we haven't told the voting web application to use this particular redis instance.
There could be multiple Redis instances running.
We haven't told the worker and the resulting app to use this particular postgreSQL database that
we ran.
So how do we do that.
That is where we use links.
Link is a command line option which can be used to link two containers together.
For example the voting app web service is dependent on the redis service. When the web server starts.
As you can see in this piece of code on the web server it looks for a redis service running on host
redis.
But the voting app container cannot resolve a host by the name redis to make the voting app aware of
the redis service.
We add a link option while running the voting app container to link it to the redis container.
Adding a --link option to the docker run command and specifying the name of the redis container
which is which in this case a redis followed by a colon and the name of the host that the voting
app is looking for which is also redis
in this case. Remember that this is why we named the container when we ran it the first time.
So we could use its name while creating a link. What this is in fact doing is, it creates an entry into the
etc host file on the voting app container adding an entry with the host name
redis with an internal IP of the redis container.
Similarly we add a link for the result app to communicate with the database by adding a link option
to refer the database by the name "db", as you can see in this our source code of the application.
It makes an attempt to connect to a postgres database on host "db".
Finally the worker application requires access to both the Redice as well as the postgres database.
So we add two links to the worker application one link to link the redis and the other link to link
postgres database.
Note that using links this way is deprecated and the support may be removed in future.
in docker. This is because as we will see in some time 
Advanced and newer concepts in docker swarm and
networking supports better ways of achieving what we just did here with links.
But I wanted to mention it anyways so you learned the concept from the very basics.

